openapi: 3.0.0

info:
  title: Binar Car Management API
  version: 0.0.1
  contact:
    email: 'kel5@gmail.com'

servers:
  - url: http://localhost:3000/api/v1

tags:
  - name: car
    description: Everything about your cars
    externalDocs:
      description: Find out more
      url: http://
  - name: users
    description: 3 type users (member, admin, superadmin)

paths:
  /car:
    get:
      tags:
        - car
      summary: show all cars
      description: display a all car
      operationId: getcar
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: car not found
      security:
        - api_key: []
        - carstore_auth:
            - write:cars
            - read:cars
    post:
      tags:
        - car
      summary: Add a new car
      description: Add a new car
      operationId: addCar
      requestBody:
        description: Create a new car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '405':
          description: Invalid input
      security:
        - carstore_auth:
            - write:cars
            - read:cars

  /car/{id}:
    get:
      tags:
        - car
      summary: Find car by ID
      description: Returns a single car
      operationId: getCarById
      parameters:
        - name: id
          in: path
          description: ID of cars to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: failed
      security:
        - api_key: []
        - carstore_auth:
            - write:cars
            - read:cars
    delete:
      tags:
        - car
      summary: Delete a car
      description: delete a car
      operationId: deletecar
      parameters:
        - name: id
          in: path
          description: car id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid car value
      security:
        - carstore_auth:
            - write:cars
            - read:cars
    put:
      tags:
        - car
      summary: Update an existing car
      description: Update an existing car by Id
      operationId: updatecar
      parameters:
        - name: id
          in: path
          description: car id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent car in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid ID supplied
        '404':
          description: car not found
        '405':
          description: Validation exception
      security:
        - carstore_auth:
            - write:cars
            - read:cars
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        carId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Car:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: avanza
        tipe:
          type: string
          example: sedan
        size:
          type: string
          example: 4
        price:
          type: integer
          example: 10000
        image:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        createdAt:
          type: string
          example: '2021-07-30 17:00:00 +0700'
        updatedAt:
          type: string
          example: '2021-07-30 17:00:00 +0700'
      xml:
        name: car
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Car:
      description: car object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Car'
        application/xml:
          schema:
            $ref: '#/components/schemas/Car'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    carstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:cars: modify cars in your account
            read:cars: read your cars
    api_key:
      type: apiKey
      name: api_key
      in: header
